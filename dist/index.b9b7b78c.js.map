{"mappings":"AACA,MAAMA,EAAiB,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,SAG/DC,EAAUC,OAAOC,YADN,6BAENC,MAAM,IAAIC,KAAKC,GAAW,CAACA,EAAOC,cAAe,OAQtDC,EACJR,EACES,KAAKC,MAAMD,KAAKE,SAAWX,EAAeY,SAC1CL,cAGJ,IAAIM,EAAc,EACdC,EAAoB,EACpBC,EAAyBC,SAASC,eAAe,YAAYJ,KAlBhD,6BAqBRT,MAAM,IAAIc,SAASZ,IACIU,SAASC,eAAeX,EAAOC,eACvCY,iBAAiB,SAAS,KAC9CC,EAAmBd,SAIvBU,SAASC,eAxBS,SAwBiBE,iBAAiB,SAAS,KACvDL,EAAoB,GACtBO,OAIJL,SAASC,eA7BU,UA6BiBE,iBAAiB,SAAS,KACxDL,EAAoB,GACtBQ,OAIJ,MAAMA,EAAqB,KACzBP,EAAuBQ,cACrB,iBAAiBT,EAAoB,MACrCU,UAAY,GACdV,KAGFE,SAASG,iBAAiB,WAAYM,IACpC,MAAMnB,EAASmB,EAAMC,IAAIC,cACzBP,EAAmBd,MAIrB,MAAMc,EAAsBd,IACtBQ,EAAoB,GAAgB,UAAXR,GAC3Be,IAGEP,GAAqB,GAAKR,EAAOsB,MAAK,gBACxCb,EAAuBQ,cACrB,iBAAiBT,MACjBe,YAAcvB,EAAOC,cACvBO,KAEa,cAAXR,GAA0BQ,EAAoB,GAChDQ,KAIED,EAAcS,UAClB,MAAMC,EAAiBC,MAAMC,KAAKlB,EAAuBmB,UACnDC,EAAYJ,EACf1B,KAAK+B,GAAkBA,EAAcP,cACrCQ,KAAK,UAEiBC,EAAcH,GASnCA,IAAc3B,SACVuB,EAAeb,SAASqB,IAC5BA,EAAMC,MAAMC,gBAhFJ,UAiFR,MAAMnC,EAASiC,EAAMV,YACrB5B,EAAQK,GAAU,CAChBoC,MAAM,EACNC,SAAS,EACTC,YAAY,YAGVC,IACNC,YAAW,IAAMC,MAAM,aAAa,KAKpChB,EAAeb,SAAQ,CAACqB,EAAOS,KAC7B,MAAM1C,EAASiC,EAAMV,YAEjBvB,IAAWE,EAAcwC,IAC3B/C,EAAQK,GAAU,CAChBoC,MAAM,EACNC,SAAS,EACTC,YAAY,GAEdL,EAAMC,MAAMC,gBAvGN,WAwGGjC,EAAcyC,SAAS3C,IAChCL,EAAQK,GAAU,CAChBoC,MAAM,EACNC,SAAS,EACTC,YAAY,GAEdL,EAAMC,MAAMC,gBA7GL,YA+GPxC,EAAQK,GAAU,CAChBoC,MAAM,EACNC,SAAS,EACTC,YAAY,GAEdL,EAAMC,MAAMC,gBAnHR,cAwHRI,IACA/B,EAAoB,EACpBD,IACAE,EAAyBC,SAASC,eAAe,YAAYJ,MApD7DkC,MAAM,yBAwDJT,EAAgBR,MAAOoB,IAC3B,IAEE,QAAwB,aADNC,MAAM,mDAAwBD,MACnCE,QACb,MAAOC,GACP,OAAO,IAILR,EAAiB,KACrB3C,OAAOoD,QAAQrD,GAASiB,SAAQ,EAAEZ,EAAQiD,MACxC,GAAIA,EAAWb,KAAM,CACG1B,SAASC,eAAeX,GAChCkC,MAAMC,gBAAkBc,EAAWZ,QAC7CY,EAAWX,WA/IP,UACC,UACH","sources":["src/index.js"],"sourcesContent":["/* Constants */\nconst WORDS_TO_GUESS = [\"zesty\", \"yield\", \"forge\", \"greed\", \"liver\", \"sushi\"];\nconst DICTIONARY_API_URL = \"https://api.dictionaryapi.dev/api/v2/entries/en/\";\nconst ALPHABET = \"abcdefghijklmnopqrstuvwxyz\";\nconst LETTERS = Object.fromEntries(\n  ALPHABET.split(\"\").map((letter) => [letter.toUpperCase(), {}])\n);\nconst ENTER_KEY = \"ENTER\";\nconst DELETE_KEY = \"DELETE\";\nconst GREEN = \"#006f45\";\nconst YELLOW = \"#da8821\";\nconst RED = \"#8b1e1e\";\n\nconst WORD_TO_GUESS =\n  WORDS_TO_GUESS[\n    Math.floor(Math.random() * WORDS_TO_GUESS.length)\n  ].toUpperCase();\n\n/* Variables / game state */\nlet guessNumber = 1;\nlet guessLetterNumber = 1;\nlet currentGuessRowElement = document.getElementById(`tile-row-${guessNumber}`);\n\n/* Bind event listeners */\nALPHABET.split(\"\").forEach((letter) => {\n  const keyboardLetterElement = document.getElementById(letter.toUpperCase());\n  keyboardLetterElement.addEventListener(\"click\", () => {\n    handleLetterSelect(letter);\n  });\n});\n\ndocument.getElementById(ENTER_KEY).addEventListener(\"click\", () => {\n  if (guessLetterNumber > 5) {\n    handleGuess();\n  }\n});\n\ndocument.getElementById(DELETE_KEY).addEventListener(\"click\", () => {\n  if (guessLetterNumber > 1) {\n    deleteLatestLetter();\n  }\n});\n\nconst deleteLatestLetter = () => {\n  currentGuessRowElement.querySelector(\n    `div:nth-child(${guessLetterNumber - 1})`\n  ).innerHTML = \"\";\n  guessLetterNumber--;\n};\n\ndocument.addEventListener(\"keydown\", (event) => {\n  const letter = event.key.toLowerCase();\n  handleLetterSelect(letter);\n});\n\n/* Handler functions */\nconst handleLetterSelect = (letter) => {\n  if (guessLetterNumber > 5 && letter === \"enter\") {\n    handleGuess();\n  }\n  // Allow player to add letters if they are A-Z\n  if (guessLetterNumber <= 5 && letter.match(/^[a-zA-Z]$/)) {\n    currentGuessRowElement.querySelector(\n      `div:nth-child(${guessLetterNumber})`\n    ).textContent = letter.toUpperCase();\n    guessLetterNumber++;\n  }\n  if (letter === \"backspace\" && guessLetterNumber > 1) {\n    deleteLatestLetter();\n  }\n};\n\nconst handleGuess = async () => {\n  const letterElements = Array.from(currentGuessRowElement.children);\n  const guessWord = letterElements\n    .map((letterElement) => letterElement.textContent)\n    .join(\"\");\n\n  const wordExists = await doesWordExist(guessWord);\n\n  // If word does not exist in dictionary, do nothing\n  if (!wordExists) {\n    alert(\"Word does not exist!\");\n    return;\n  }\n\n  // If the guess is correct, player wins!\n  if (guessWord === WORD_TO_GUESS) {\n    await letterElements.forEach((child) => {\n      child.style.backgroundColor = GREEN;\n      const letter = child.textContent;\n      LETTERS[letter] = {\n        used: true,\n        correct: true,\n        correctPos: true,\n      };\n    });\n    await updateKeyboard();\n    setTimeout(() => alert(\"You win!\"), 0);\n  }\n  // Else, asses what letters the player got right/wrong\n  // ⚠️ TODO: fix instance where guess has letter more than once, but answer only has it once ⚠️\n  else {\n    letterElements.forEach((child, index) => {\n      const letter = child.textContent;\n\n      if (letter === WORD_TO_GUESS[index]) {\n        LETTERS[letter] = {\n          used: true,\n          correct: true,\n          correctPos: true,\n        };\n        child.style.backgroundColor = GREEN;\n      } else if (WORD_TO_GUESS.includes(letter)) {\n        LETTERS[letter] = {\n          used: true,\n          correct: true,\n          correctPos: false,\n        };\n        child.style.backgroundColor = YELLOW;\n      } else {\n        LETTERS[letter] = {\n          used: true,\n          correct: false,\n          correctPos: false,\n        };\n        child.style.backgroundColor = RED;\n      }\n    });\n\n    // If user guesses wrong, go to next guess row and update the keyboard\n    updateKeyboard();\n    guessLetterNumber = 1;\n    guessNumber++;\n    currentGuessRowElement = document.getElementById(`tile-row-${guessNumber}`);\n  }\n};\n\nconst doesWordExist = async (word) => {\n  try {\n    const res = await fetch(`${DICTIONARY_API_URL}${word}`);\n    return !(res.status === 404);\n  } catch (_e) {\n    return true;\n  }\n};\n\nconst updateKeyboard = () => {\n  Object.entries(LETTERS).forEach(([letter, letterData]) => {\n    if (letterData.used) {\n      const letterElement = document.getElementById(letter);\n      letterElement.style.backgroundColor = letterData.correct\n        ? letterData.correctPos\n          ? GREEN\n          : YELLOW\n        : RED;\n    }\n  });\n};\n"],"names":["$35da740d59af89ba$var$WORDS_TO_GUESS","$35da740d59af89ba$var$LETTERS","Object","fromEntries","split","map","letter","toUpperCase","$35da740d59af89ba$var$WORD_TO_GUESS","Math","floor","random","length","$35da740d59af89ba$var$guessNumber","$35da740d59af89ba$var$guessLetterNumber","$35da740d59af89ba$var$currentGuessRowElement","document","getElementById","forEach","addEventListener","$35da740d59af89ba$var$handleLetterSelect","$35da740d59af89ba$var$handleGuess","$35da740d59af89ba$var$deleteLatestLetter","querySelector","innerHTML","event","key","toLowerCase","match","textContent","async","letterElements","Array","from","children","guessWord","letterElement","join","$35da740d59af89ba$var$doesWordExist","child","style","backgroundColor","used","correct","correctPos","$35da740d59af89ba$var$updateKeyboard","setTimeout","alert","index","includes","word","fetch","status","_e","entries","letterData"],"version":3,"file":"index.b9b7b78c.js.map"}